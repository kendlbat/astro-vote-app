---
import { getSession } from "auth-astro/server";
import Layout from "../../../layouts/Layout.astro";
import { VoteForm } from "../../../components/VoteForm";
import { db } from "../../../lib/db";
import { zfd } from "zod-form-data";
import { z } from "zod";

const session = await getSession(Astro.request);
const { id } = Astro.params;

if (!session?.user?.email)
    return Astro.redirect(`/login?r=${Astro.request.url}`);

const voting = await db.query("SELECT * FROM votings WHERE id = $1", [id]);

const options = (
    await db.query("SELECT * FROM options WHERE voting_id = $1", [id])
).rows;

console.log(options.map((o) => o.id));

const votedAlready =
    (
        await db.query(
            "SELECT id FROM votes WHERE owner = $1 AND option_id =  ANY($2::int[])",
            [session.user.email, options.map((o) => o.id)]
        )
    ).rows.length > 0;

if (votedAlready) {
    return new Response("You have already voted", { status: 400 });
}

if (Astro.request.method == "POST") {
    try {
        await db.query("BEGIN");
        const parser = zfd.formData({
            option: zfd
                .numeric()
                .refine((id) => options.some((o) => o.id === id)),
        });

        const { option } = parser.parse(await Astro.request.formData());

        await db.query("INSERT INTO votes (option_id, owner) VALUES ($1, $2)", [
            option,
            session.user.email,
        ]);
        await db.query("COMMIT");
        return Astro.redirect(`/`);
    } catch (error) {
        await db.query("ROLLBACK");
        return new Response(JSON.stringify({ error: error.message }), {
            status: 400,
            headers: { "Content-Type": "application/json" },
        });
    }
}
---

<Layout title="Vote">
    <h1>{voting.rows[0].title}</h1>
    <p>{voting.rows[0].description}</p>
    <VoteForm user={session.user.email} votingId={id || ""} options={options} />
</Layout>
